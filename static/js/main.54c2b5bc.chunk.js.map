{"version":3,"sources":["components/Header.js","components/GenericInput.js","components/Text.js","components/Button.js","components/Todo.js","components/TodoList.js","App.js","reportWebVitals.js","index.js"],"names":["Header","id","className","text","GenericInput","type","fieldName","onChangeHandler","onKeyDownHandler","error","value","label","checked","isChecked","htmlFor","name","onChange","onKeyDown","Text","Button","onClickHandler","onClick","Todo","countId","countClass","count","todoItemId","todoItemClass","todoText","todoDelId","todoDelClickHandler","todoDelClass","todoCheckType","todoCheckHandler","todoKeyDownHandler","todoCheckName","todoCheckId","todoCheckValue","todoLabel","todoCheckDone","todoKey","todoError","TodoList","todos","todoItemDelHandler","todoItemCheckHandler","items","map","todoItem","todo","done","App","useState","txtTodo","setTxtTodo","arrTodo","setArrTodo","setError","e","target","length","key","newTodoState","idArr","split","filter","item","document","getElementById","toString","classList","toggle","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.54c2b5bc.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Header = ({ id, className, text }) => {\n  return (\n    <header id={id} className={className}>\n      {text}\n    </header>\n  );\n};\n\nHeader.propTypes = {\n  id: PropTypes.string,\n  className: PropTypes.string,\n  text: PropTypes.string.isRequired,\n};\nexport default Header;\n","import PropTypes from 'prop-types';\n\nconst GenericInput = ({\n  type,\n  fieldName,\n  id,\n  onChangeHandler,\n  onKeyDownHandler,\n  error,\n  value,\n  label,\n  isChecked,\n}) => {\n  let checked = isChecked ? 'checked' : null;\n  return (\n    <>\n      <span className='error'> {error} </span>\n      <label htmlFor={fieldName}> {label} </label>\n      <input\n        type={type}\n        name={fieldName}\n        id={id}\n        onChange={onChangeHandler}\n        onKeyDown={onKeyDownHandler}\n        value={value}\n        checked={checked}\n      />\n    </>\n  );\n};\n\nGenericInput.propTypes = {\n  type: PropTypes.string.isRequired,\n  fieldName: PropTypes.string.isRequired,\n  error: PropTypes.string,\n  value: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  onChangeHandler: PropTypes.func.isRequired,\n};\n\nexport default GenericInput;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Text = ({ text, id, className }) => {\n  return (\n    <span id={id} className={className}>\n      {text}\n    </span>\n  );\n};\n\nText.propTypes = {\n  id: PropTypes.string,\n  className: PropTypes.string,\n};\n\nexport default Text;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Button = ({ id, className, value, onClickHandler }) => {\n  return (\n    <span\n      className={'material-icons ' + className}\n      onClick={onClickHandler}\n      id={id}\n      value={value}\n    >\n      delete\n    </span>\n  );\n};\n\nButton.propTypes = {\n  id: PropTypes.string,\n  className: PropTypes.string,\n  value: PropTypes.string.isRequired,\n  onClickHandler: PropTypes.func.isRequired,\n};\nexport default Button;\n","import React from 'react';\nimport Text from './Text';\nimport Button from './Button';\nimport GenericInput from './GenericInput';\n\nconst Todo = ({\n  countId,\n  countClass,\n  count,\n  todoItemId,\n  todoItemClass,\n  todoText,\n  todoDelId,\n  todoDelClickHandler,\n  todoDelClass,\n  todoCheckType,\n  todoCheckHandler,\n  todoKeyDownHandler,\n  todoCheckName,\n  todoCheckId,\n  todoCheckValue,\n  todoLabel,\n  todoCheckDone,\n  todoKey,\n  todoError,\n}) => {\n  return (\n    <div id={'item-' + count} className='item'>\n      <Text id={countId} className={countClass} text={count} />\n      <Text id={todoItemId} className={todoItemClass} text={todoText} />\n      <GenericInput\n        type={todoCheckType}\n        fieldName={todoCheckName}\n        id={todoCheckId}\n        onChangeHandler={todoCheckHandler}\n        onKeyDownHandler={todoKeyDownHandler}\n        value={todoCheckValue}\n        label={todoLabel}\n        key={todoKey}\n        error={todoError}\n        checked={todoCheckDone}\n      />\n      <Button\n        id={todoDelId}\n        className={todoDelClass}\n        value='Delete Me'\n        onClickHandler={todoDelClickHandler}\n      />\n    </div>\n  );\n};\n\nexport default Todo;\n","import React from 'react';\nimport Todo from './Todo';\n\nconst TodoList = ({ todos, todoItemDelHandler, todoItemCheckHandler }) => {\n  const items = todos.map((todoItem, count) => {\n    return (\n      <Todo\n        countId={'item-count-' + (count + 1)}\n        countClass='item-count'\n        count={count + 1}\n        todoItemId={'item-' + (count + 1)}\n        todoItemClass='item-todo'\n        todoText={todoItem.todo}\n        todoDelId={'btn-' + (count + 1)}\n        todoDelClickHandler={todoItemDelHandler}\n        todoDelClass='btn-del'\n        todoCheckType='checkbox'\n        todoCheckName='ki'\n        todoCheckId={'chk-todo-' + (count + 1)}\n        todoCheckHandler={todoItemCheckHandler}\n        todoKeyDownHandler=''\n        todoCheckValue='done'\n        todoLabel=''\n        todoCheckDone={todoItem.done}\n        todoKey=''\n        todoError=''\n        key='count'\n      />\n    );\n  });\n\n  return <div className='items'>{items}</div>;\n};\n\nexport default TodoList;\n","import './App.css';\nimport { useState } from 'react';\nimport Header from './components/Header';\nimport GenericInput from './components/GenericInput';\nimport TodoList from './components/TodoList';\n\nfunction App() {\n  const [txtTodo, setTxtTodo] = useState('');\n  const [arrTodo, setArrTodo] = useState([]);\n  const [error, setError] = useState('');\n\n  const onTextChangeHandler = (e) => {\n    setTxtTodo(e.target.value);\n\n    if (e.target.value.length === 0) {\n      setError(\"Please type something you'd like to do\");\n      return;\n    } else {\n      setError('');\n    }\n  };\n\n  const onKeyDownHandler = (e) => {\n    if (e.key === 'Enter') {\n      if (txtTodo.length === 0) {\n        setError('ooops!... Cannot submit a blank to do item!');\n        return;\n      } else {\n        // handle to do list submission logic\n        let newTodoState = [...arrTodo, { todo: txtTodo, done: false }];\n        setArrTodo(newTodoState);\n        // clear field\n        setTxtTodo('');\n      }\n    }\n  };\n\n  const fncOnToDoItemDelete = (e) => {\n    let idArr = e.target.id.split('-');\n    let id = idArr[idArr.length - 1];\n    let newTodoState = arrTodo.filter((item, count) => {\n      return count !== id - 1;\n    });\n    setArrTodo(newTodoState);\n  };\n\n  const fncOnToDoCheck = (e) => {\n    // get to do list item id\n    let idArr = e.target.id.split('-');\n    let id = idArr[idArr.length - 1];\n    // update item as done in state\n    arrTodo[id - 1].done = !arrTodo[id - 1].done;\n    setArrTodo(arrTodo);\n    // update class of row of item\n    let row = document.getElementById('item-' + id.toString());\n    row.classList.toggle('done');\n  };\n\n  return (\n    <div className='App'>\n      <Header id='header' className='header' text='Todo List Manager' />\n      <div className='todo-input-div'>\n        <GenericInput\n          type='text'\n          fieldName='txtTodo'\n          id='txtToDo'\n          onChangeHandler={onTextChangeHandler}\n          onKeyDownHandler={onKeyDownHandler}\n          value={txtTodo}\n          label='What would you like to do?'\n          key=''\n          error={error}\n        />\n      </div>\n      <div className='todo-div'>\n        <TodoList\n          todos={arrTodo}\n          todoItemDelHandler={fncOnToDoItemDelete}\n          todoItemCheckHandler={fncOnToDoCheck}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}